/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package soplanificacion;

import ProccesFabrication.Process;
import EstructurasDeDatos.Cola;
import javax.swing.JOptionPane;

/**
 *
 * @author dugla
 */
public class CrearProcesoDialog extends javax.swing.JDialog {

    private Interfaz interfazPrincipal;
    /**
     * Creates new form CrearProcesoDialog
     */
    public CrearProcesoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Guarda la referencia a la Interfaz que lo llamó
        
        
        this.interfazPrincipal = (Interfaz) parent;
        txtCiclosExcepcion.setEnabled(radioIoBound.isSelected());
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtInstrucciones = new javax.swing.JTextField();
        txtCiclosExcepcion = new javax.swing.JTextField();
        txtCiclosResolver = new javax.swing.JTextField();
        radioCpuBound = new javax.swing.JRadioButton();
        radioIoBound = new javax.swing.JRadioButton();
        botonCrear = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nombre del Proceso:");

        jLabel2.setText("Cantidad de Instrucciones:");

        jLabel3.setText("Tipo de Proceso:");

        jLabel4.setText("Ciclos para Excepción (E/S):");

        jLabel5.setText("Ciclos para Resolver (E/S):");

        buttonGroup1.add(radioCpuBound);
        radioCpuBound.setText("CPU-Bound");
        radioCpuBound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCpuBoundActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioIoBound);
        radioIoBound.setText("I/O-Bound");
        radioIoBound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioIoBoundActionPerformed(evt);
            }
        });

        botonCrear.setText("Crear");
        botonCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonCrear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCancelar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCiclosExcepcion, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(48, 48, 48)
                            .addComponent(radioCpuBound)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(radioIoBound, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(18, 18, 18)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtCiclosResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(radioCpuBound)
                    .addComponent(radioIoBound))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCiclosExcepcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCiclosResolver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonCrear)
                    .addComponent(botonCancelar))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        // TODO add your handling code here:// Cierra la ventana de diálogo sin hacer nada.
    this.dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearActionPerformed
        // TODO add your handling code here:// 1. Recolectar los datos de los campos
        // 1. Recolectar los datos de los campos
        StringBuilder errores = new StringBuilder();
        
        // Variables para almacenar los datos del proceso
        String nombre = "";
        int instrucciones = 0;
        int ciclosExcepcion = -1; // -1 para CPU-Bound
        int ciclosResolver = -1;  // -1 para CPU-Bound

        // --- INICIO DE VALIDACIONES ---

        // 1. Validar Nombre
        nombre = txtNombre.getText().trim();
        if (nombre.isEmpty()) {
            errores.append("- El nombre del proceso no puede estar vacío.\n");
        }

        // 2. Validar Instrucciones (Numérico y Positivo)
        try {
            instrucciones = Integer.parseInt(txtInstrucciones.getText());
            if (instrucciones <= 0) {
                errores.append("- La cantidad de instrucciones debe ser un número mayor a cero.\n");
            }
        } catch (NumberFormatException e) {
            errores.append("- La cantidad de instrucciones debe ser un número válido.\n");
        }

        // 3. Validar Tipo de Proceso (Selección obligatoria)
        if (!radioCpuBound.isSelected() && !radioIoBound.isSelected()) {
            errores.append("- Debe seleccionar un tipo de proceso (CPU-Bound o I/O-Bound).\n");
        }

        // 4. Validaciones específicas para I/O-Bound
        if (radioIoBound.isSelected()) {
            // Validar Ciclos para Excepción
            try {
                ciclosExcepcion = Integer.parseInt(txtCiclosExcepcion.getText());
                if (ciclosExcepcion <= 0) {
                    errores.append("- Los ciclos para excepción deben ser un número mayor a cero.\n");
                }
            } catch (NumberFormatException e) {
                errores.append("- Los ciclos para excepción deben ser un número válido.\n");
            }

            // Validar Ciclos para Resolver
            try {
                ciclosResolver = Integer.parseInt(txtCiclosResolver.getText());
                if (ciclosResolver <= 0) {
                    errores.append("- Los ciclos para resolver deben ser un número mayor a cero.\n");
                }
            } catch (NumberFormatException e) {
                errores.append("- Los ciclos para resolver deben ser un número válido.\n");
            }

            // 5. Validación Lógica: Ciclos de Excepción vs. Instrucciones
            if (instrucciones > 0 && ciclosExcepcion > 0 && ciclosExcepcion >= instrucciones) {
                errores.append("- Los ciclos para la excepción deben ser menores que el total de instrucciones.\n");
            }
        }

        // --- FIN DE VALIDACIONES ---

        // 6. Comprobar si se encontraron errores y actuar
        if (errores.length() > 0) {
            // SI HAY ERRORES: Mostrar ventana de alerta
            JOptionPane.showMessageDialog(this,
                "Por favor, corrija los siguientes errores:\n\n" + errores.toString(),
                "Error de validación",
                JOptionPane.ERROR_MESSAGE);
        } else {
            // SI TODO ESTÁ BIEN: Crear el proceso, añadirlo a la cola y cerrar
            System.out.println("¡Validación exitosa! Creando el proceso...");

            boolean esIoBound = radioIoBound.isSelected();
            Process nuevoProceso = new Process(nombre, instrucciones, esIoBound, ciclosExcepcion, ciclosResolver);

            // --- ¡AQUÍ ESTÁ LA CORRECCIÓN! ---
            try {
                // 3. Añadirlo a la cola global de "Nuevos" (de forma SEGURA)
                Interfaz.semaforoNuevos.acquire(); // Pide el candado
                try {
                    // Ahora es seguro modificar la cola
                    // (Asumo que tu Interfaz.java tiene un getter para la cola)
                    // Si 'colaNuevos' es 'public static', puedes usar Interfaz.colaNuevos
                    interfazPrincipal.getColaNuevos().insert(nuevoProceso);
                } finally {
                    Interfaz.semaforoNuevos.release(); // Suelta el candado
                }
                // --- FIN DE LA CORRECCIÓN ---

                System.out.println("Proceso Creado: ID=" + nuevoProceso.getId() + ", Nombre=" + nuevoProceso.getName());
                
                // Muestra pop-up de éxito
                JOptionPane.showMessageDialog(this, 
                    "Proceso '" + nombre + "' creado con éxito.", 
                    "Proceso Creado", 
                    JOptionPane.INFORMATION_MESSAGE);
    
                // Cerrar la ventana de diálogo
                this.dispose();

            } catch (InterruptedException e) {
                Thread.currentThread().interrupt(); // Buena práctica
                JOptionPane.showMessageDialog(this, 
                    "Error de concurrencia: No se pudo añadir el proceso a la cola.\n" + e.getMessage(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
            // --- FIN DEL BLOQUE 'else' MODIFICADO ---
        }
        
    }//GEN-LAST:event_botonCrearActionPerformed

    private void radioCpuBoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCpuBoundActionPerformed
        // TODO add your handling code here:
        if (radioCpuBound.isSelected()) {
        txtCiclosExcepcion.setEnabled(false);
        txtCiclosResolver.setText(""); // Opcional: limpia el campo
    }
    }//GEN-LAST:event_radioCpuBoundActionPerformed

    private void radioIoBoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioIoBoundActionPerformed
        // TODO add your handling code here:
        if (radioIoBound.isSelected()) {
        txtCiclosExcepcion.setEnabled(true);
    }
    }//GEN-LAST:event_radioIoBoundActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearProcesoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearProcesoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearProcesoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearProcesoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CrearProcesoDialog dialog = new CrearProcesoDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonCrear;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton radioCpuBound;
    private javax.swing.JRadioButton radioIoBound;
    private javax.swing.JTextField txtCiclosExcepcion;
    private javax.swing.JTextField txtCiclosResolver;
    private javax.swing.JTextField txtInstrucciones;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
